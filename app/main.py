import os
import openai
import dotenv
import streamlit as st
import hashlib  # For generating unique keys

# Carregar vari√°veis de ambiente do arquivo .env
dotenv.load_dotenv()

# Configura√ß√£o do OpenAI 
client = openai.AzureOpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    api_version=os.getenv("OPENAI_API_VERSION"),
    azure_endpoint=os.getenv("OPENAI_ENDPOINT")
)
deployment_name = os.getenv("DEPLOYMENT_NAME", "gpt-4")

# Configura√ß√£o da IA (no prompt da API)
system_message = {
    "role": "system",
    "content": """Voc√™ √© Prometeu, um assistente de cria√ß√£o de conte√∫do com o poder do fogo! 
                  Seu objetivo √© ajudar os usu√°rios a criar textos criativos e informativos."""
}

# Inicializar o estado da sess√£o (com valores padr√£o)
if "current_conversation" not in st.session_state:
    st.session_state.current_conversation = None
if "conversations" not in st.session_state:
    st.session_state.conversations = {}

# Configurar o t√≠tulo da p√°gina
st.set_page_config(page_title=f"üî• IA Generativa Prometeu üí¨")

# Fun√ß√£o para gerar um t√≠tulo para a conversa (aprimorada)
def generate_conversation_title(messages):
    if messages:
        prompt = f"Crie um t√≠tulo curto e descritivo para esta conversa:\n\n{messages[-1]['content']}"
        response = client.chat.completions.create(
            engine=deployment_name, messages=[system_message, {"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    else:
        return "Nova Conversa"

# Inicializa√ß√£o do Streamlit
st.title(f"üî• IA Generativa Prometeu üí¨")
st.write("Seu assistente de cria√ß√£o de conte√∫do com o poder do fogo!")

# Bot√£o para iniciar nova conversa na barra lateral (corrigido)
if st.sidebar.button("Nova Conversa", key="new_conversation_button"):
    st.session_state.current_conversation = generate_conversation_title([])

# Hist√≥rico de Conversas (com unique keys e l√≥gica de exibi√ß√£o aprimorada)
st.sidebar.title("Hist√≥rico de Conversas")
for title in st.session_state.conversations:
    if title != st.session_state.current_conversation:
        key = hashlib.md5(title.encode()).hexdigest()
        if st.sidebar.button(title, key=key):
            st.session_state.current_conversation = title

# √Årea principal de chat
if st.session_state.current_conversation is None:
    st.session_state.current_conversation = generate_conversation_title([])
if st.session_state.current_conversation not in st.session_state.conversations:
    st.session_state.conversations[st.session_state.current_conversation] = []

st.header(st.session_state.current_conversation)
for message in st.session_state.conversations.get(st.session_state.current_conversation, []):
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("Digite sua mensagem"):
    st.session_state.conversations[st.session_state.current_conversation].append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Chamada √† API do OpenAI (atualizado)
    messages = [system_message] + st.session_state.conversations[st.session_state.current_conversation]
    response = client.chat.completions.create(
        model=deployment_name, messages=messages
    )

    # Processar a resposta da API
    msg = response.choices[0].message.content
    st.session_state.conversations[st.session_state.current_conversation].append({"role": "assistant", "content": msg})
    with st.chat_message("assistant"):
        st.markdown(msg)
